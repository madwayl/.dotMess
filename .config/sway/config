# Default config for sway
#
# Copy this to ~/.config/sway/config and edit it to your liking.
#
# Read `man 5 sway` for a complete reference.

# Font for window titles. Will also be used by the bar unless a different font
# is used in the bar {} block below.
font pango:FantasqueSansM Nerd Font 10

### Variables
#
# Logo key. Use Mod1 for Alt.
set $mod Mod4
# Home row direction keys, like vim
set $left h
set $down j
set $up k
set $right l
# Your preferred terminal emulator
# Recommends: foot
set $term kitty
# Your preferred application launcher
# Note: pass the final command to swaymsg so that the resulting window can be opened
# on the original workspace that the command was run on.
# Recommends: rofi-wayland
set $rofi_cmd rofi \
        -terminal '$term'
# Shows a combined list of the applications with desktop files and
# executables from PATH
# TODO: add window with the next release of rofi-wayland
# set $menu $rofi_cmd -show combi -combi-modes drun#run -modes combi
set $menu $rofi_cmd -modi "drun,run,ssh,filebrowser,window,ï‚¬  Web:~/.config/rofi/scripts/rofi-web-search.py,calc" \
    -show drun \
    -sorting-method fzf -matching fuzzy \
    -calc-command "echo -n '{result}' | wl-copy" -calc-command-history \
    -automatic-save-to-history

### Notification Daemon
exec mako

### Output configuration
#
# Default wallpaper (more resolutions are available in /usr/share/backgrounds/sway/)
# Requires: desktop-backgrounds-compat, swaybg
# output * bg ~/.local/share/wallpapers/4539903-minimalism-gruvbox.png fill
# exec_always bash ~/.config/sway/scripts/lock-wallpaper.sh

# set $wallpaper_path $(find $HOME/.local/share/wallpapers -type f | shuf -n 1)
output * bg ~/.local/share/wallpapers/tmp/wallpaper.png fill

#
# Example configuration:
#
#   output HDMI-A-1 resolution 1920x1080 position 1920,0
#
# You can get the names of your outputs by running: swaymsg -t get_outputs

### Desktop Setup

exec_always '$HOME/.bin/shikane'
exec_always '$HOME/.bin/shikanectl switch default-room'
exec_always 'echo "default-room" > "$HOME/.config/shikane/.current_profile"'
bindsym $mod+p exec_always --no-startup-id '~/.config/sway/scripts/cycle-monitors.sh'

# set $Display 1 2-Default, 2 1-Off, 3 1-Only
# mode "$Display" {
#     bindsym 1 exec_always 'p/opt/shikanectl switch default-room', mode "default"
#     bindsym 2 exec_always '/opt/shikanectl switch default-off', mode "default"
#     bindsym 3 exec_always '/opt/shikanectl switch default', mode "default"

#     # back to normal: Enter or Escape
#     bindsym Return mode "default"
#     bindsym Escape mode "default"
#     bindsym $mod+p mode "default"
# }

### External Monitor Brightness
bindsym --locked Shift+XF86MonBrightnessUp exec_always '~/.config/sway/scripts/external-brightness.sh + 5'
bindsym --locked Shift+XF86MonBrightnessDown exec_always '~/.config/sway/scripts/external-brightness.sh - 5'


### Idle configuration
#
# Example configuration:
#
# exec swayidle -w \
#          timeout 1800 'swaylock -f -c 000000' \
#          timeout 1805 'swaymsg "output * power off"' resume 'swaymsg "output * power on"' \
#          before-sleep 'swaylock -f -c 000000'
#
# This will lock your screen after 300 seconds of inactivity, then turn off
# your displays after another 300 seconds, and turn your screens back on when
# resumed. It will also lock your screen before your computer goes to sleep.


exec swayidle -w \
    timeout 1800 "swaylock -f -c 000000 -i /tmp/lockscreen.png" \
    timeout 1805 'swaymsg "output * power off"' resume 'swaymsg "output * power on"' \
    before-sleep "swaylock -f -c 000000 -i /tmp/lockscreen.png"

exec systemd-inhibit --what=handle-power-key sleep infinity
# # ^ stop power button from suspending

bindsym XF86PowerOff exec 'swaylock -f; systemctl hibernate'
# # ^ lock and suspend

### Input configuration
#
# Example configuration:
#
#   input "2:14:SynPS/2_Synaptics_TouchPad" {
#       dwt enabled
#       tap enabled
#       natural_scroll enabled
#       middle_emulation enabled
#   }
#
# You can get the names of your inputs by running: swaymsg -t get_inputs
# Read `man 5 sway-input` for more information about this section.

input type:touchpad {
    accel_profile adaptive
    click_method clickfinger
    drag enabled
    dwt enabled
    # events disabled_on_external_mouse
    middle_emulation enabled
    pointer_accel .5
    scroll_method two_finger
    tap enabled
}

# NetworkManager is the most popular way to manage wireless networks on Linux,
# and nm-applet is a desktop environment-independent system tray GUI for it.
exec nm-applet --indicator

### Key bindings
#
# Basics:
#
    # Start a terminal
    bindsym $mod+Return exec $term

    # Kill focused window
    bindsym $mod+Shift+q kill

    # Start your launcher
    bindsym $mod+d exec $menu
    
    # Launch VS Code
    bindsym $mod+Alt+c exec code

    # Launch Files
    bindsym $mod+Alt+f exec nemo

    # Launch Browser
    bindsym $mod+Alt+b exec firefox

    # Drag floating windows by holding down $mod and left mouse button.
    # Resize them with right mouse button + $mod.
    # Despite the name, also works for non-floating windows.
    # Change normal to inverse to use left mouse button for resizing and right
    # mouse button for dragging.
    floating_modifier $mod normal

    # Reload the configuration file
    bindsym $mod+Shift+c reload

    # Exit sway (logs you out of your Wayland session)
    # bindsym $mod+Shift+e exec swaynag -t warning -m 'You pressed the exit shortcut. Do you really want to exit sway? This will end your Wayland session.' -B 'Yes, exit sway' 'swaymsg exit'
    bindsym $mod+Shift+e exec 'swaymsg exit'
#
# Moving around:
#
    # Move your focus around
    bindsym $mod+$left focus left
    bindsym $mod+$down focus down
    bindsym $mod+$up focus up
    bindsym $mod+$right focus right
    # Or use $mod+[up|down|left|right]
    bindsym $mod+Left focus left
    bindsym $mod+Down focus down
    bindsym $mod+Up focus up
    bindsym $mod+Right focus right

    # Move the focused window with the same, but add Shift
    bindsym $mod+Shift+$left move left
    bindsym $mod+Shift+$down move down
    bindsym $mod+Shift+$up move up
    bindsym $mod+Shift+$right move right
    # Ditto, with arrow keys
    bindsym $mod+Shift+Left move left
    bindsym $mod+Shift+Down move down
    bindsym $mod+Shift+Up move up
    bindsym $mod+Shift+Right move right
#
# Workspaces:
#
    # Switch to workspace
    bindsym $mod+1 workspace number 1
    bindsym $mod+2 workspace number 2
    bindsym $mod+3 workspace number 3
    bindsym $mod+4 workspace number 4
    bindsym $mod+5 workspace number 5
    bindsym $mod+6 workspace number 6
    bindsym $mod+7 workspace number 7
    bindsym $mod+8 workspace number 8
    bindsym $mod+9 workspace number 9
    bindsym $mod+0 workspace number 10
    # Move focused container to workspace
    bindsym $mod+Shift+1 move container to workspace number 1
    bindsym $mod+Shift+2 move container to workspace number 2
    bindsym $mod+Shift+3 move container to workspace number 3
    bindsym $mod+Shift+4 move container to workspace number 4
    bindsym $mod+Shift+5 move container to workspace number 5
    bindsym $mod+Shift+6 move container to workspace number 6
    bindsym $mod+Shift+7 move container to workspace number 7
    bindsym $mod+Shift+8 move container to workspace number 8
    bindsym $mod+Shift+9 move container to workspace number 9
    bindsym $mod+Shift+0 move container to workspace number 10
    # Note: workspaces can have any name you want, not just numbers.
    # We just use 1-10 as the default.

    # Allow switching between workspaces with left and right swipes
    bindgesture swipe:right workspace next_on_output
    bindgesture swipe:left workspace prev_on_output

#
# Layout stuff:
#
    # You can "split" the current object of your focus with
    # $mod+b or $mod+v, for horizontal and vertical splits
    # respectively.
    bindsym $mod+b splith
    bindsym $mod+v splitv

    # Switch the current container between different layout styles
    bindsym $mod+s layout stacking
    bindsym $mod+w layout tabbed
    bindsym $mod+e layout toggle split

    # Make the current focus fullscreen
    bindsym $mod+f fullscreen

    # Toggle the current focus between tiling and floating mode
    bindsym $mod+Shift+space floating toggle

    # Swap focus between the tiling area and the floating area
    bindsym $mod+space focus mode_toggle

    # Move focus to the parent container
    bindsym $mod+a focus parent
#
# Scratchpad:
#
    # Sway has a "scratchpad", which is a bag of holding for windows.
    # You can send windows there and get them back later.

    # Move the currently focused window to the scratchpad
    bindsym $mod+Shift+minus move scratchpad

    # Show the next scratchpad window or hide the focused scratchpad window.
    # If there are multiple scratchpad windows, this command cycles through them.
    bindsym $mod+minus scratchpad show
#
# Resizing containers:
#
mode "resize" {
    # left will shrink the containers width
    # right will grow the containers width
    # up will shrink the containers height
    # down will grow the containers height
    bindsym $left resize shrink width 10px
    bindsym $down resize grow height 10px
    bindsym $up resize shrink height 10px
    bindsym $right resize grow width 10px

    # Ditto, with arrow keys
    bindsym Left resize shrink width 10px
    bindsym Down resize grow height 10px
    bindsym Up resize shrink height 10px
    bindsym Right resize grow width 10px

    # Return to default mode
    bindsym Return mode "default"
    bindsym Escape mode "default"
}

bindsym $mod+r mode "resize"

# Clipboard
# https://www.reddit.com/r/swaywm/comments/16ifbaa/i_finally_got_copyq_to_work_on_sway_with/
exec copyq --start-server
exec export YDOTOOL_SOCKET=/tmp/.ydotool_socket
exec ydotoold

for_window [app_id="com.github.hluk.copyq"] floating enable; resize set 700 300; move position pointer; blur true, opacity 0.90
bindsym $mod+alt+v exec 'copyq show'

set $gnome-schema org.gnome.desktop.interface

# Appearance
# gaps inner 10px
# gaps outer 30px

##########
# Colors #
##########
set $bg      #161616
set $bg2     #262626
set $bg3     #525252
set $fg      #cecece
set $red     #da1e28
set $blue    #33B1FF
set $purple  #be95ff

set $black   #000000
set $white   #ffffff

# Class                 Border  Backgr. Text    Indigator Child border
client.focused          $bg3    $bg     $fg     $bg3      $bg3
client.focused_inactive $bg2    $bg     $bg3    $bg2      $bg2
client.unfocused        $bg2    $bg     $bg3    $bg2      $bg2
client.urgent           $bg2    $red    $white  $red      $red
client.placeholder      $black  $black  $white  $black    $black
client.background       $fg

########################
# Layer Rules #
########################
# find out what layer is what with swaymsg -r -t get_outputs |

# Borderless
for_window [class="^.*"] border pixel 0, blur true, opacity 0.95
for_window [class=".*"] inhibit_idle fullscreen
for_window [app_id=".*"] inhibit_idle fullscreen

blur enable
# blur_xray enable
# blur_passes 3
blur_radius 10
# blur_noise 0.0
# blur_contrast 1.0
smart_corner_radius on
corner_radius 5
default_dim_inactive 0.1
shadows on
shadow_blur_radius 60

for_window [title="Picture-in-Picture"] floating enable, sticky enable, resize set 512 px 288 px, move position 1300 px 680 px

for_window [title="^Extension:*Firefox$"] floating enable, resize set 512 px 912 px
for_window [title="Sign in â€“ Google accounts â€” Mozilla Firefox"] floating enable, resize set 912 px 912 px

layer_effects "waybar" {
    blur enable;
    # blur_xray enable;
    blur_radius 8;
    # blur_passes 3;

    # blur_ignore_transparent enable;
    shadows enable;
    shadows_on_csd enable;
    shadow_blur_radius 30;
}

layer_effects "rofi" {
    blur enable;
    blur_radius 1;
    blur_passes 1;
    # blur_ignore_transparent enable;
    blur_brightness 1.5;
    shadows enable;
    shadows_on_csd enable;
    shadow_blur_radius 60;
}

layer_effects "mako" {
    blur enable;
    blur_radius 2;
    blur_passes 3;
    # blur_ignore_transparent enable;
    blur_brightness 1.0;
    shadows enable;
    shadows_on_csd enable;
    shadow_blur_radius 60;
}

layer_effects "gtk-layer-shell"  {
    blur enable; 
    blur_ignore_transparent enable; 
    blur_brightness 0.75; 
    corner_radius 2;
}

# Gaps
gaps inner 10
# Only enable gaps on a workspace when there is at least one container
# smart_gaps on

# Include configs from 3 locations:
#  - /usr/share/sway/config.d
#  - /etc/sway/config.d
#  - $XDG_CONFIG_HOME/sway/config.d ($HOME/.config/sway/config.d)
#
# If multiple directories contain the files with the same name, the later
# directory takes precedence; `$XDG_CONFIG_HOME/sway/config.d/20-swayidle.conf`
# will always be loaded instead of `/usr/share/sway/config.d/20-swayidle.conf`
# or `/etc/sway/config.d/20-swayidle.conf`
#
# This mechanism permits overriding our default configuration per-system
# (/etc) or per-user ($XDG_CONFIG_HOME) basis. Just create the file you
# want to modify/override in the higher-level directory.
#
# For example, to disable the default bar from Fedora configs, you'll need to
#     $ echo -n > "$HOME/.config/sway/config.d/90-bar.conf"
#
# Note the quoting, the $() and the arguments quoting. All the parts are equally
# important to make the magic work. And if you want to learn the secret behind
# the trick, it's all in the `wordexp(3)`.
#
include '$(/usr/libexec/sway/layered-include "/usr/share/sway/config.d/*.conf" "/etc/sway/config.d/*.conf" "${XDG_CONFIG_HOME:-$HOME/.config}/sway/config.d/*.conf")'
