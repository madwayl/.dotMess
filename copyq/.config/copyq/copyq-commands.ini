[Commands]
1\Command="copyq: \nvar text = clipboard()\ncopy(text)\ncopySelection(text)\npaste()"
1\Enable=false
1\GlobalShortcut=ctrl+shift+v
1\Icon=
1\InternalId=copyq_global_paste_clipboard_plain
1\IsGlobalShortcut=true
1\Name=Paste clipboard as plain text
10\Command=copyq: plugins.itemencrypted.encryptItems()
10\Icon=
10\InMenu=true
10\Input=!OUTPUT
10\InternalId=copyq_encrypted_encrypt
10\Name=Encrypt (needs GnuPG)
10\Output=application/x-copyq-encrypted
10\Shortcut=ctrl+l
11\Command=copyq: plugins.itemencrypted.decryptItems()
11\Icon=
11\InMenu=true
11\Input=application/x-copyq-encrypted
11\InternalId=copyq_encrypted_decrypt
11\Name=Decrypt
11\Output=application/x-copyq-item
11\Shortcut=ctrl+l
12\Command=copyq: plugins.itemencrypted.copyEncryptedItems()
12\Icon=
12\InMenu=true
12\Input=application/x-copyq-encrypted
12\InternalId=copyq_encrypted_decrypt_and_copy
12\Name=Decrypt and Copy
12\Shortcut=ctrl+shift+l
13\Command=copyq: plugins.itemencrypted.pasteEncryptedItems()
13\Icon=
13\InMenu=true
13\Input=application/x-copyq-encrypted
13\InternalId=copyq_encrypted_decrypt_and_paste
13\Name=Decrypt and Paste
13\Shortcut=enter
2\Command="copyq: paste(); previous()"
2\Enable=false
2\GlobalShortcut=ctrl+v
2\Icon=
2\InternalId=copyq_global_paste_copy_previous
2\IsGlobalShortcut=true
2\Name=Paste and copy previous
3\Command=copyq: plugins.itempinned.pin()
3\Icon=
3\InMenu=true
3\Input=!OUTPUT
3\InternalId=copyq_pinned_pin
3\Name=Pin
3\Output=application/x-copyq-item-pinned
4\Command=copyq: plugins.itempinned.unpin()
4\Icon=
4\InMenu=true
4\Input=application/x-copyq-item-pinned
4\InternalId=copyq_pinned_unpin
4\Name=Unpin
5\Command=copyq: (plugins.itemtags.hasTag(decodeURIComponent('Important')) ? plugins.itemtags.untag : plugins.itemtags.tag)(decodeURIComponent('Important'))
5\Icon=
5\InMenu=true
5\InternalId=copyq_tags_tag:Important
5\Name=Toggle Tag “Important”
6\Command=copyq: plugins.itemtags.tag()
6\Icon=
6\InMenu=true
6\InternalId=copyq_tags_tag
6\Name=Add a Tag
7\Command=copyq: plugins.itemtags.untag()
7\Icon=
7\InMenu=true
7\Input=application/x-copyq-tags
7\InternalId=copyq_tags_untag
7\Name=Remove a Tag
8\Command=copyq: plugins.itemtags.clearTags()
8\Icon=
8\InMenu=true
8\Input=application/x-copyq-tags
8\InternalId=copyq_tags_clear
8\Name=Clear all tags
9\Command="/*\nThis adds support for KDE, Gnome, Sway and Hyprland Wayland sessions.\n\nFor Sway and Hyprland, this requires:\n- `ydotool` utility to send copy/paste shortcuts to applications\n- `grim` for taking screenshot\n- `slurp` for selecting screenshot area\n- `gnome-screenshot` for screenshots in Gnome\n- `spectacle` for screenshots in non-Gnome environments\n\nFor KDE, this requires Spectacle for taking screenshots.\n\nGetting current window title is not supported in KDE.\n\nGlobal shortcut commands can be triggered with:\n\n    copyq triggerGlobalShortcut {COMMAND_NAME}\n\nOn Gnome, clipboard monitor is executed as X11 app using XWayland.\n\nLinks:\n- https://github.com/ReimuNotMoe/ydotool\n- https://github.com/emersion/grim\n- https://github.com/emersion/slurp\n*/\n\nfunction isSway() {\n    return env('SWAYSOCK').length != 0\n}\n\nfunction isHyprland() {\n    return env('HYPRLAND_CMD').length != 0\n}\n\nfunction isKde() {\n    return env('XDG_CURRENT_DESKTOP') == 'KDE'\n}\n\nfunction isGnome() {\n    return str(env('XAUTHORITY')).includes('mutter-Xwayland')\n}\n\nfunction run() {\n    const p = execute.apply(this, arguments)\n    if (!p) {\n        throw 'Failed to start ' + arguments[0]\n    }\n    if (p.exit_code !== 0) {\n        throw 'Failed command ' + arguments[0] + ': ' + str(p.stderr)\n    }\n    return p.stdout\n}\n\nfunction swayGetTree() {\n    const tree = run('swaymsg', '--raw', '--type', 'get_tree')\n    return JSON.parse(str(tree))\n}\n\nfunction swayFindFocused(tree) {\n    const nodes = tree['nodes'].concat(tree['floating_nodes'])\n    for (const node of nodes) {\n        if (node['focused'])\n            return node\n        const focusedNode = swayFindFocused(node)\n        if (focusedNode)\n            return focusedNode\n    }\n    return undefined\n}\n\nfunction hyprlandFindFocused() {\n    const window = run('hyprctl', '-j', 'activewindow')\n    return JSON.parse(str(window))\n}\n\nfunction kdeFocused() {\n    return str(run('kdotool', 'getactivewindow', 'getwindowname'))\n}\n\nfunction sendShortcut(...shortcut) {\n    sleep(100)\n    run('ydotool', 'key', ...shortcut)\n}\n\nglobal.currentWindowTitle = function() {\n    if (isSway()) {\n        const tree = swayGetTree()\n        const focusedNode = swayFindFocused(tree)\n        return focusedNode ? focusedNode['name'] : ''\n    }\n\n    if (isHyprland()) {\n        const focusedWindow = hyprlandFindFocused()\n        return focusedWindow ? focusedWindow['title'] : ''\n    }\n\n    if (isKde()) {\n        return kdeFocused()\n    }\n\n    return ''\n}\n\nglobal.paste = function() {\n    sendShortcut('42:1', '110:1', '110:0', '42:0')\n}\n\nconst copy_ = global.copy\nglobal.copy = function() {\n    if (arguments.length == 0) {\n        sendShortcut('29:1', '46:1', '46:0', '29:0')\n    } else {\n        copy_.apply(this, arguments)\n    }\n}\n\nglobal.focusPrevious = function() {\n    hide()\n}\n\nfunction overrideToRunInXWayland(fn) {\n    const oldFn = global[fn]\n    global[fn] = function() {\n        if (isGnome() && env('QT_QPA_PLATFORM') != 'xcb') {\n            serverLog(`Starting XWayland ${fn}`)\n            setEnv('QT_QPA_PLATFORM', 'xcb')\n            execute('copyq', '--clipboard-access', fn)\n            serverLog(`Stopping XWayland ${fn}`)\n            return\n        }\n        return oldFn()\n    }\n}\noverrideToRunInXWayland('monitorClipboard')\noverrideToRunInXWayland('synchronizeFromSelection')\noverrideToRunInXWayland('synchronizeToSelection')\n\nconst onClipboardChanged_ = onClipboardChanged\nonClipboardChanged = function() {\n    const title = currentWindowTitle()\n    if (title)\n        setData(mimeWindowTitle, title)\n    onClipboardChanged_()\n}\n\nfunction gnomeScreenshot(arg) {\n    const tmpFile = TemporaryFile()\n    tmpFile.setFileTemplate(Dir().temp().absoluteFilePath('copyq-XXXXXX.png'))\n    tmpFile.openWriteOnly()\n    tmpFile.close()\n    run(\n        'gnome-screenshot',\n        arg || '--delay=0',\n        '--include-pointer',\n        '--file',\n        tmpFile.fileName(),\n    )\n    const file = File(tmpFile.fileName())\n    file.openReadOnly()\n    const stdout = File('/dev/stdout')\n    stdout.openWriteOnly()\n    stdout.write(file.readAll())\n}\n\nscreenshot = function(format, screenName) {\n    if (isSway() || isHyprland())\n        return run('grim', '-t', format || 'png', '-')\n    if (isGnome())\n        return gnomeScreenshot()\n    return run(\n        'spectacle',\n        '--background',\n        '--nonotify',\n        '--pointer',\n        '--output',\n        '/dev/stdout',\n    )\n}\n\nscreenshotSelect = function(format, screenName) {\n    if (isSway() || isHyprland()) {\n        let geometry = run('slurp')\n        geometry = str(geometry).trim()\n        return run('grim', '-c', '-g', geometry, '-t', format || 'png', '-')\n    }\n    if (isGnome())\n        return gnomeScreenshot('--area')\n    return run(\n        'spectacle',\n        '--background',\n        '--nonotify',\n        '--pointer',\n        '--region',\n        '--output',\n        '/dev/stdout',\n    )\n}\n\nglobal.triggerGlobalShortcut = function(commandName) {\n    const cmds = commands()\n    for (const cmd of cmds) {\n        if (cmd.isGlobalShortcut && cmd.enable && cmd.name == commandName)\n            return action(cmd.cmd)\n    }\n    throw 'Failed to find enabled global command with given name'\n}"
9\Icon=
9\IsScript=true
9\Name=Wayland Support
size=13
